{"version":3,"sources":["../../../src/components/layout/with-mobile-view.jsx"],"names":["withMobileView","MAX_MOBILE_WIDTH","WrappedComponent","WithMobileView","state","isMobile","_resizeTimeout","NaN","handleResize","bind","window","addEventListener","removeEventListener","clearTimeout","isNaN","setTimeout","setState","innerWidth","props","React","Component","displayName","getDisplayName","name"],"mappings":";;;;;;;;;;kBAIwBA,c;;AAJxB;;;;;;;;;;;;AAEA,IAAMC,mBAAmB,IAAzB;;AAEe,SAASD,cAAT,CAAwBE,gBAAxB,EAA0C;AAAA,MACjDC,cADiD;AAAA;;AAErD,8BAAc;AAAA;;AAAA;;AAGZ,YAAKC,KAAL,GAAa;AACXC,kBAAU;AADC,OAAb;;AAIA,YAAKC,cAAL,GAAsBC,GAAtB;AACA,YAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,YAAKD,YAAL;AATY;AAUb;;AAZoD;AAAA;AAAA,0CAcjC;AAClB,YAAIE,MAAJ,EAAYA,OAAOC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKH,YAAvC;AACb;AAhBoD;AAAA;AAAA,6CAkB9B;AACrB,YAAIE,MAAJ,EAAYA,OAAOE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKJ,YAA1C;AACZK,qBAAa,KAAKP,cAAlB;AACD;AArBoD;AAAA;AAAA,qCAuBtC;AAAA;;AACb,YAAI,CAACQ,MAAM,KAAKR,cAAX,CAAL,EAAiC;AAC/BO,uBAAa,KAAKP,cAAlB;AACD;;AAED,YAAII,MAAJ,EAAY;AACV,eAAKJ,cAAL,GAAsBS,WAAW,YAAM;AACrC,mBAAKC,QAAL,CAAc;AACZX,wBAAUK,OAAOO,UAAP,IAAqBhB;AADnB,aAAd,EAEG,YAAM;AACP,qBAAKK,cAAL,GAAsBC,GAAtB;AACD,aAJD;AAKD,WANqB,EAMnB,GANmB,CAAtB;AAOD;AACF;AArCoD;AAAA;AAAA,+BAuC5C;AACP,eAAO,8BAAC,gBAAD,aAAkB,UAAU,KAAKH,KAAL,CAAWC,QAAvC,IAAqD,KAAKa,KAA1D,EAAP;AACD;AAzCoD;;AAAA;AAAA,IAC1BC,gBAAMC,SADoB;;AA4CvDjB,iBAAekB,WAAf,uBAA+CC,eAAepB,gBAAf,CAA/C;AACA,SAAOC,cAAP;AACD;;AAED,SAASmB,cAAT,CAAwBpB,gBAAxB,EAA0C;AACxC,SAAOA,iBAAiBmB,WAAjB,IAAgCnB,iBAAiBqB,IAAjD,IAAyD,WAAhE;AACD","file":"with-mobile-view.js","sourcesContent":["import React from 'react';\n\nconst MAX_MOBILE_WIDTH = 1080;\n\nexport default function withMobileView(WrappedComponent) {\n  class WithMobileView extends React.Component {\n    constructor() {\n      super();\n\n      this.state = {\n        isMobile: false\n      }\n\n      this._resizeTimeout = NaN;\n      this.handleResize = this.handleResize.bind(this);\n      this.handleResize();\n    }\n\n    componentDidMount() {\n      if (window) window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n      if (window) window.removeEventListener('resize', this.handleResize);\n      clearTimeout(this._resizeTimeout);\n    }\n\n    handleResize() {\n      if (!isNaN(this._resizeTimeout)) {\n        clearTimeout(this._resizeTimeout);\n      }\n\n      if (window) {\n        this._resizeTimeout = setTimeout(() => {\n          this.setState({\n            isMobile: window.innerWidth <= MAX_MOBILE_WIDTH\n          }, () => {\n            this._resizeTimeout = NaN;\n          });\n        }, 100);\n      }\n    }\n\n    render() {\n      return <WrappedComponent isMobile={this.state.isMobile} {...this.props} />;\n    }\n  }\n\n  WithMobileView.displayName = `WithMobileView(${getDisplayName(WrappedComponent)})`;\n  return WithMobileView;\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\n"]}