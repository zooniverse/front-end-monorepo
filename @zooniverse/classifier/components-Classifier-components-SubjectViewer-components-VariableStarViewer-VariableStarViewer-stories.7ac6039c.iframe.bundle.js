"use strict";(self.webpackChunk_zooniverse_classifier=self.webpackChunk_zooniverse_classifier||[]).push([[1300],{"./src/components/Classifier/components/SubjectViewer/components/JSONDataViewer/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>_JSONDataViewer__WEBPACK_IMPORTED_MODULE_0__.A});var _JSONDataViewer__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/Classifier/components/SubjectViewer/components/JSONDataViewer/JSONDataViewer.jsx")},"./src/components/Classifier/components/SubjectViewer/components/VariableStarViewer/VariableStarViewer.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,NarrowView:()=>NarrowView,PanZoom:()=>PanZoom,__namedExportsOrder:()=>__namedExportsOrder,default:()=>VariableStarViewer_stories});var Box=__webpack_require__("../../node_modules/grommet/es6/components/Box/Box.js"),rosie=__webpack_require__("../../node_modules/rosie/src/rosie.js"),VariableStarViewer=__webpack_require__("./src/components/Classifier/components/SubjectViewer/components/VariableStarViewer/index.js"),JSONDataViewer=__webpack_require__("./src/components/Classifier/components/SubjectViewer/components/JSONDataViewer/index.js"),mobxreact_esm=__webpack_require__("../../node_modules/mobx-react/dist/mobxreact.esm.js"),mockStore=__webpack_require__("./test/mockStore/index.js"),ImageToolbar=__webpack_require__("./src/components/Classifier/components/ImageToolbar/index.js");var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),subject=rosie.$.build("subject",{locations:[{"image/png":"talkfallback.png"},{"application/json":"https://raw.githubusercontent.com/zooniverse/front-end-monorepo/master/packages/lib-classifier/src/components/Classifier/components/SubjectViewer/helpers/mockLightCurves/variableStar.json"},{"image/png":"https://raw.githubusercontent.com/zooniverse/front-end-monorepo/master/packages/lib-classifier/src/components/Classifier/components/SubjectViewer/components/VariableStarViewer/mocks/temperature.png"}]}),store=(0,mockStore.A)({subject});function ViewerContext(_ref){var children=_ref.children;return(0,jsx_runtime.jsx)(mobxreact_esm.Kq,{classifierStore:store,children})}ViewerContext.displayName="ViewerContext";const VariableStarViewer_stories={title:"Subject Viewers / VariableStarViewer",component:VariableStarViewer.A,parameters:{docs:{description:{component:'# Variable Star Viewer\n\nThe Variable Star Viewer is a variant of the Subject Viewer that is a composite of the Scatter Plot Viewer, the Bar Chart Viewer, and the Single Image Viewer, with a few additional custom controls.\n\n## Features\n\nThe Variable Star Viewer...\n- allows users to view coordinate data series in scatter plots\n  - one of the plots of coordinate data is rendered by a phase multiple parameter\n  - both plots can invert its y-axis\n  - data series can be focusable by a toggle which changes the color rendered\n- allows users to view feature data in bar charts\n  - the bar charts render based on the phase multiple parameter\n- allows users to view a HR diagram image\n\n## Props\n\n// TODO add information about component props\n\n## External Setup: Workflows and Subjects\n\n### Workflow\n\nThe Workflow of the project should have a configuration specified that the Variable Star Viewer should be used.\n\n`workflow.configuration = { subject_viewer: \'variableStar\' }`\n\n### Subject\n\nEach Subject has three files: \n- an image file (which works as a "thumbnail" to be seen on Talk, this must be first in the subject location\'s list)\n- a JSON file containing the data for the scatter plots and bar charts\n- an image of the subject\'s HR diagram\n\n``` js\nsubject.locations = [\n  { "image/png": "subject1234.png" }, // Fallback image for Talk forums\n  { "application/json": "subject1234.json" },\n  { "image/png": "hrDiagram.png" }\n]\n```\n\n### JSON file\n\nThe JSON file takes the shapes for both the scatter plots and bar charts:\n\n\nThe multiple series JSON shape is an object consisting of an object for `scatterPlot` and an array for `barCharts`:\n\n``` json\n{ \n  "data": {\n    "scatterPlot": {\n      "data": [\n        { \n          "seriesData": [\n            { "x": 1.46,\n              "y": 6.37,\n              "x_error": 2,\n              "y_error": 0.5\n            }, {\n              "x": 7.58,\n              "y": 9.210\n            }\n          ],\n          "seriesOptions": {\n            "color": "drawing-red",\n            "label": "Filter 1",\n            "period": 0.4661477096\n          }\n        }, {\n          "seriesData": [\n            { "x": 700,\n              "y": 500,\n              "x_error": 2,\n              "y_error": 0.5\n            }, {\n              "x": 701,\n              "y": 900\n            }\n          ],\n          "seriesOptions": {\n            "color": "drawing-blue",\n            "label": "Filter 2",\n            "period": 1.025524961\n          }\n        }\n      ],\n      "chartOptions": {\n        "xAxisLabel": "Days",\n        "yAxisLabel": "Brightness"\n      }\n    },\n    "barCharts": {\n      "period": { \n        "data": [\n          {\n            "color": "drawing-red",\n            "label": "Filter 1",\n            "value": 0.4661477096\n          },\n          {\n            "color": "drawing-blue",\n            "label": "Filter 2",\n            "value": 1.025524961\n          }\n        ],\n        "chartOptions": {\n          "xAxisLabel": "Period",\n          "yAxisLabel": ""\n        }\n      }, \n      "amplitude": {\n        "data": [\n          {\n            "color": "drawing-red",\n            "label": "Filter 1",\n            "value": 1.045\n          },\n          {\n            "color": "status-critical",\n            "label": "filter-2",\n            "value": 1.9989011347\n          }\n        ],\n        "chartOptions": {\n          "xAxisLabel": "Amplitude",\n          "yAxisLabel": ""\n        }\n      }\n    }\n  }\n}\n```\n\n#### `scatterPlot`\n\nFor the `scatterPlot` object, this JSON takes the same shape as expected for the generic `ScatterPlotViewer` when multiple data series are defined. The `seriesData` property should be an array of objects where at minimum an x and y coordinate is required. An optional `x_error` and/or `y_error` number can be specified if error bars need to be displayed for that single data point. Each series supports a set of options under `seriesOptions` and at minimum a string `label` is required for each series. An optional string `color` for can defined using either a variable name from the colors available from the [zooniverse theme object](https://github.com/zooniverse/front-end-monorepo/tree/master/packages/lib-grommet-theme) or a hex value. If a color is not provided, a color from the Zooniverse theme will be chosen and applied for each series. \n\nA set of chart options can also be supplied that define the x-axis and y-axis labels as well as the custom margins to use. Margin is defined as the space outside axes lines. The scatter plots have a default margin of `{ bottom: 60, left: 60, right: 10, top: 10}`.\n\n#### `barCharts`\n\nFor the `barCharts` array, this JSON takes the same same as expected for the generic `BarChartViewer` with properties for `data` and `chartOptions`. The `data` property is an array of objects that at minimum contain a string `label` and number `value`. Optionally, a `color` for each bar can be set. The color can be a variable name from the colors available from the [zooniverse theme object](https://github.com/zooniverse/front-end-monorepo/tree/master/packages/lib-grommet-theme) or a hex value. The `chartOptions` object expects strings for `xAxisLabel` and `yAxisLabel`. It  optionally can set margins using a `margin` key expecting an object with for top, bottom, left, and right.  Margin is defined as the space outside of the axes lines. The bar charts have a default margin of `{ bottom: 40, left: 40, right: 0, top: 0 }`. Another option is to set y axis domain (see [d3 domains for linear scales](https://observablehq.com/@d3/d3-scalelinear)) as `yAxisDomain` which expects an array of two numbers. The domain for the bar charts defaults to a dynamically generated domain depending on the extent of the y values.\n'}}}};function Default(){return(0,jsx_runtime.jsx)(ViewerContext,{children:(0,jsx_runtime.jsx)(Box.a,{height:"640px",width:{max:"900px"},children:(0,jsx_runtime.jsx)(JSONDataViewer.A,{})})})}function NarrowView(){return(0,jsx_runtime.jsx)(ViewerContext,{children:(0,jsx_runtime.jsx)(Box.a,{height:"640px",width:{max:"900px"},children:(0,jsx_runtime.jsx)(JSONDataViewer.A,{})})})}function PanZoom(){return(0,jsx_runtime.jsx)(ViewerContext,{children:(0,jsx_runtime.jsxs)(Box.a,{direction:"row",height:"640px",width:{max:"900px"},children:[(0,jsx_runtime.jsx)(JSONDataViewer.A,{}),(0,jsx_runtime.jsx)(ImageToolbar.A,{width:"4rem"})]})})}Default.displayName="Default",NarrowView.displayName="NarrowView",NarrowView.parameters={viewport:{defaultViewport:"iphone5"}},PanZoom.displayName="PanZoom",Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"function Default() {\n  return <ViewerContext>\n      <Box height='640px' width={{\n      max: '900px'\n    }}>\n        <JSONDataViewer />\n      </Box>\n    </ViewerContext>;\n}",...Default.parameters?.docs?.source}}},NarrowView.parameters={...NarrowView.parameters,docs:{...NarrowView.parameters?.docs,source:{originalSource:"function NarrowView() {\n  return <ViewerContext>\n      <Box height='640px' width={{\n      max: '900px'\n    }}>\n        <JSONDataViewer />\n      </Box>\n    </ViewerContext>;\n}",...NarrowView.parameters?.docs?.source}}},PanZoom.parameters={...PanZoom.parameters,docs:{...PanZoom.parameters?.docs,source:{originalSource:"function PanZoom() {\n  return <ViewerContext>\n      <Box direction='row' height='640px' width={{\n      max: '900px'\n    }}>\n        <JSONDataViewer />\n        <ImageToolbar width='4rem' />\n      </Box>\n    </ViewerContext>;\n}",...PanZoom.parameters?.docs?.source}}};const __namedExportsOrder=["Default","NarrowView","PanZoom"]}}]);